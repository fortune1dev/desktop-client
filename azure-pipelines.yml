# Requirements:
#   set 'GithubPAT' secure variable in the Azure Pipelines UI

name: $(System.TeamProject)-$(Build.SourceBranchName)-$(Date:yyyyMMdd-HHmm)$(Rev:.r)

trigger:
  branches:
    include:
    - releases/*
  paths:
    exclude:
    - README.md

pr: none
# pr:
#   autoCancel: true
#   branches:
#     include:
#     - master
#     - releases/*
#   paths:
#     exclude:
#     - README.md

variables:
  desktopRepo: $(Build.Repository.Name)

jobs:

- job: WaitForDaemonsBuild
  pool:
    vmImage: ubuntu-16.04
  steps:
  - checkout: none

  - script: |
      echo Build.BuildId=$(Build.BuildId)
      echo Build.BuildNumber=$(Build.BuildNumber)
      echo Build.BuildUri=$(Build.BuildUri)
    displayName: Echo predefined vars

  - script: |
      set -o xtrace
      desktopRepo="$(desktopRepo)"
      daemonsRepo=${desktopRepo%-*}
      contains () { [[ "$1" =~ (^|[[:space:]])"$2" ]]; }
      while [ : ]
      do
        branches=`curl -H "Authorization: token $(GithubPAT)" https://api.github.com/repos/$daemonsRepo/branches | jq -r '.[] | .name' | tr '\n' ' '`
        echo branches=$branches
        contains "$branches" releases ; result=$?
        [[ $result -eq 0 ]] && sleep 30s || break
      done
    displayName: Sleep while daemons repo has 'releases/*' branch

####################### Linux #######################
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  dependsOn: WaitForDaemonsBuild
  steps:
  - checkout: none

  - task: DownloadBuildArtifacts@0
    displayName: Download daemons build artifacts
    inputs:
      buildType: specific
      project: bytecoin
      pipeline: bytecoin-daemons
      buildVersionToDownload: 'latest'
      downloadType: single
      artifactName: linux64
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - script: |
      unzip $(Build.ArtifactStagingDirectory)/linux64/\*.zip
      mkdir bytecoin/bin
      mv -v *d bytecoin/bin/
      ./bytecoin/bin/bytecoind --version
    displayName: Unzip daemons build artifact

  - script: |
      mkdir bytecoin-gui && cd bytecoin-gui
      git init
      git remote add origin https://user:$(GithubPAT)@github.com/$(desktopRepo)
      git fetch --depth 1 origin $(Build.SourceBranch)
      git checkout FETCH_HEAD
    displayName: Clone desktop code

  - script: |
      sudo apt-get update
      sudo apt-get install -y qt5-qmake qtbase5-dev qtbase5-dev-tools qt5-default
    displayName: Install qt

  - script: |
      mkdir bytecoin-gui/build && cd bytecoin-gui/build
      qmake ../src/bytecoin-gui.pro && make -j$(nproc)
    displayName: Build desktop

  - script: |
      zip -j -r $(Build.ArtifactStagingDirectory)/$(System.TeamProject)-desktop-$(Build.SourceBranchName)-linux64.zip \
        bytecoin-gui/bin/bytecoind \
        bytecoin-gui/bin/walletd \
        bytecoin/bin/minerd \
        bytecoin-gui/bin/bytecoin-gui
    displayName: Zip desktop

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: linux64
    displayName: Publish artifacts


####################### Macos #######################
- job: Mac
  pool:
    vmImage: macOS-10.13
  dependsOn: WaitForDaemonsBuild
  variables:
    MACOSX_DEPLOYMENT_TARGET: 10.11
  condition: |
    and(
      succeeded(),
      or(
        startsWith(variables['build.sourceBranch'], 'refs/heads/releases/'),
        startsWith(variables['build.sourceBranch'], 'refs/tags/')
    ))
  steps:
  - checkout: none

  - task: DownloadBuildArtifacts@0
    displayName: Download daemons build artifacts
    inputs:
      buildType: specific
      project: bytecoin
      pipeline: bytecoin-daemons
      buildVersionToDownload: 'latest'
      downloadType: single
      artifactName: macos
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - script: |
      unzip $(Build.ArtifactStagingDirectory)/macos/\*.zip
      mkdir bytecoin/bin
      mv -v *d bytecoin/bin/
      ./bytecoin/bin/bytecoind --version
    displayName: Unzip daemons build artifact

  - script: |
      mkdir bytecoin-gui && cd bytecoin-gui
      git init
      git remote add origin https://user:$(GithubPAT)@github.com/$(desktopRepo)
      git fetch --depth 1 origin $(Build.SourceBranch)
      git checkout FETCH_HEAD
    displayName: Clone desktop code

  - script: |
      curl -L -O https://raw.githubusercontent.com/Homebrew/homebrew-core/8d4d48f0bb552b7b107119aeef59f141ce1f72c3/Formula/qt.rb
      depends_on :macos => :mountain_lion
      sed -i '' 's/depends_on :macos => :mountain_lion/#depends_on :macos => :mountain_lion/g' qt.rb
      brew install qt.rb
    displayName: Install qt 5.10.1

  - script: |
      mkdir bytecoin-gui/build && cd bytecoin-gui/build
      /usr/local/opt/qt/bin/qmake ../src/bytecoin-gui.pro && make -j
    displayName: Build desktop code

  - script: |
      /usr/local/opt/qt/bin/macdeployqt bytecoin-gui/bin/bytecoin-gui.app
    displayName: Call macdeployqt

  - script: |
      cd bytecoin-gui/bin
      zip -y -r $(Build.ArtifactStagingDirectory)/$(System.TeamProject)-desktop-$(Build.SourceBranchName)-macos.zip bytecoin-gui.app
    displayName: Zip app folder

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: macos
    displayName: Publish artifacts


####################### Windows #######################
- job: Windows
  pool:
    vmImage: vs2017-win2016
  dependsOn: WaitForDaemonsBuild
  condition: |
    and(
      succeeded(),
      or(
        startsWith(variables['build.sourceBranch'], 'refs/heads/releases/'),
        startsWith(variables['build.sourceBranch'], 'refs/tags/')
    ))
  variables:
    QTDIR: C:\Users\qt\work\install
    vsPath: C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise
    vsCMakeDir: $(vsPath)\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin
    vsMSBuildDir: $(vsPath)\MSBuild\15.0\Bin
    VCINSTALLDIR: $(vsPath)\VC
    qtVer: 5.12.2
    qtFullVer: $(qtVer)-0-201903131307
    qtBuildName: Windows-Windows_10-MSVC2017-Windows-Windows_10-X86
    qtMSVC: msvc2017
    qtRepoUrlPrefix: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt5_5122/qt.qt5.5122.win
    wixInstallPath: C:\Program Files (x86)\WiX Toolset v3.11\bin
  strategy:
    matrix:
      win64:
        opensslDir: openssl
        opensslConfig: VC-WIN64A
        generatorName: Visual Studio 15 2017 Win64
        qtBinArch: _64
        installerArch: x64
        arch: 64
      win32:
        opensslDir: openssl32
        opensslConfig: VC-WIN32
        generatorName: Visual Studio 15 2017
        qtBinArch:
        installerArch: x86
        arch: 32
  steps:
  - checkout: none

  - task: DownloadBuildArtifacts@0
    displayName: Download daemons build artifacts
    inputs:
      buildType: specific
      project: bytecoin
      pipeline: bytecoin-daemons
      buildVersionToDownload: 'latest'
      downloadType: single
      artifactName: win$(arch)
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - bash: |
      set -o xtrace
      7z x "$(Build.ArtifactStagingDirectory)"/win$(arch)/\*.zip
      mkdir bytecoin/bin
      mv -v *d.exe bytecoin/bin
      mv -v *d.pdb bytecoin/bin
      mv -v *.dll bytecoin/bin/
      ./bytecoin/bin/bytecoind --version
    displayName: Unzip daemons build artifact

  - bash: |
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)qtbase-$(qtBuildName)$(qtBinArch).7z
      7z x $(qtFullVer)qtbase-$(qtBuildName)$(qtBinArch).7z -o"C:\Users\qt\work\temp"
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)qttools-$(qtBuildName)$(qtBinArch).7z
      7z x $(qtFullVer)qttools-$(qtBuildName)$(qtBinArch).7z -o"C:\Users\qt\work\temp"
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)qttranslations-$(qtBuildName)$(qtBinArch).7z
      7z x $(qtFullVer)qttranslations-$(qtBuildName)$(qtBinArch).7z -o"C:\Users\qt\work\temp"
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)qtimageformats-$(qtBuildName)$(qtBinArch).7z
      7z x $(qtFullVer)qtimageformats-$(qtBuildName)$(qtBinArch).7z -o"C:\Users\qt\work\temp"
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)qtsvg-$(qtBuildName)$(qtBinArch).7z
      7z x $(qtFullVer)qtsvg-$(qtBuildName)$(qtBinArch).7z -o"C:\Users\qt\work\temp"
      curl -L -O $(qtRepoUrlPrefix)$(arch)_$(qtMSVC)$(qtBinArch)/$(qtFullVer)opengl32sw-$(arch)-mesa_12_0_rc2.7z
      7z x $(qtFullVer)opengl32sw-$(arch)-mesa_12_0_rc2.7z -o"C:\Users\qt\work\temp"
      mkdir -p "$(QTDIR)"
      mv -v "C:\Users\qt\work\temp"/$(qtVer)/$(qtMSVC)$(qtBinArch)/* "$(QTDIR)"
      sed -b -i 's/QT_EDITION = Enterprise/QT_EDITION = OpenSource/g' "$(QTDIR)"/mkspecs/qconfig.pri
      sed -b -i 's/QT_LICHECK = licheck.exe/QT_LICHECK = /g' "$(QTDIR)"/mkspecs/qconfig.pri
    displayName: Install Qt

  - bash: |
      curl -L -O http://download.qt.io/official_releases/jom/jom.zip
      7z x jom.zip -ojom
    displayName: Install Jom

  - bash: |
      mkdir bytecoin-gui && cd bytecoin-gui
      git init
      git remote add origin https://user:$(GithubPAT)@github.com/$(desktopRepo)
      git fetch --depth 1 origin $(Build.SourceBranch)
      git checkout FETCH_HEAD
    displayName: Clone desktop code

  - bash: |
      mkdir bytecoin-gui/build && cd bytecoin-gui/build
      echo "call \"$VCINSTALLDIR\Auxiliary\Build\vcvars$(arch).bat\"" > compile.bat
      echo "\"$QTDIR\bin\qmake.exe\" ..\src\bytecoin-gui.pro" >> compile.bat
      echo "..\..\jom\jom -j %NUMBER_OF_PROCESSORS%" >> compile.bat
      ./compile.bat
    displayName: Build desktop

  - bash: |
      cd bytecoin-gui/bin
      echo "call \"$VCINSTALLDIR\Auxiliary\Build\vcvars$(arch).bat\"" > deploy.bat
      echo "\"$QTDIR/bin/windeployqt.exe\" ." >> deploy.bat
      ./deploy.bat
    displayName: Call windeployqt

  - bash: |
      VCRedistVersion=`cat "$VCINSTALLDIR\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt"`
      VCMergeModulesDir="$VCINSTALLDIR\Redist\MSVC\\$VCRedistVersion\MergeModules"
      cd bytecoin-gui/Windows\ Installer
      "$(wixInstallPath)"/candle.exe -arch $(installerArch) \
        -dVersion=$(Build.SourceBranchName) \
        -dProductVersion=`date +%y.%m.%d` \
        -dDate=`date +%Y/%m/%d` \
        -dVC_MERGE_MODULES_PATH="$VCMergeModulesDir\Microsoft_VC141_CRT_$(installerArch).msm" \
        Installer.wxs
      "$(wixInstallPath)"/light.exe -sw1076 -ext WixUIExtension -spdb -out "$(Build.ArtifactStagingDirectory)"/bytecoin-desktop-$(Build.SourceBranchName)-win$(arch).msi Installer.wixobj
    displayName: Build Wix installer

  - bash: |
      cd bytecoin-gui/bin
      7z a "$(Build.ArtifactStagingDirectory)"/bytecoin-desktop-$(Build.SourceBranchName)-win$(arch)-portable.zip .
    displayName: Zip desktop

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: win$(arch)
    displayName: Publish artifacts

#############################
- job: CreateGithubRelease
  pool:
    vmImage: ubuntu-16.04
  dependsOn:
  - Linux
  - Mac
  - Windows
  condition: |
    and(
      succeeded(),
      startsWith(variables['build.sourceBranch'], 'refs/heads/releases/')
    )
  steps:
  - checkout: none

  - task: DownloadBuildArtifacts@0
    displayName: Download artifacts
    inputs:
      downloadType: specific
      itemPattern: '**'
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - script: |
      set -e
      set -o xtrace
      ls -alh $(Build.ArtifactStagingDirectory)
      [[ `echo $(Build.SourceBranchName) | grep '-'` ]] && preRelease=true || preRelease=false
      curl -H "Authorization: token $(GithubPAT)" \
        -d '{ "tag_name": "v$(Build.SourceBranchName)",
            "target_commitish": "$(Build.SourceVersion)",
            "name": "v$(Build.SourceBranchName)",
            "draft": true,
            "prerelease": '$preRelease'}' \
        https://api.github.com/repos/$(desktopRepo)/releases > resp
      cat resp
      release_id=`cat resp | jq -r '.id'`
      echo release_id=$release_id
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/linux64/$(System.TeamProject)-desktop-$(Build.SourceBranchName)-linux64.zip" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="$(System.TeamProject)-desktop-$(Build.SourceBranchName)-linux64.zip"
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/macos/$(System.TeamProject)-desktop-$(Build.SourceBranchName)-macos.zip" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="$(System.TeamProject)-desktop-$(Build.SourceBranchName)-macos.zip"
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/win64/bytecoin-desktop-$(Build.SourceBranchName)-win64.msi" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="bytecoin-desktop-$(Build.SourceBranchName)-win64.msi"
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/win32/bytecoin-desktop-$(Build.SourceBranchName)-win32.msi" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="bytecoin-desktop-$(Build.SourceBranchName)-win32.msi"
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/win64/bytecoin-desktop-$(Build.SourceBranchName)-win64-portable.zip" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="bytecoin-desktop-$(Build.SourceBranchName)-win64-portable.zip"
      curl \
        -H "Authorization: token $(GithubPAT)" \
        -H "Content-Type: application/zip" -X POST \
        --data-binary "@$(Build.ArtifactStagingDirectory)/win32/bytecoin-desktop-$(Build.SourceBranchName)-win32-portable.zip" \
        https://uploads.github.com/repos/$(desktopRepo)/releases/$release_id/assets?name="bytecoin-desktop-$(Build.SourceBranchName)-win32-portable.zip"
    displayName: Create github release in desktop repo

  - script: |
      curl -H "Authorization: token $(GithubPAT)" -X DELETE https://api.github.com/repos/$(desktopRepo)/git/$(Build.SourceBranch)
    displayName: Remove branch created for the build
